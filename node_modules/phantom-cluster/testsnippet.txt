exports.testPhantomQueuedEngine = (test) ->
    test.expect(if cluster.isMaster then 9 else 0)

    engine = phantomCluster.createQueued({ workers: 1 })
    
    engine.on "queueItemReady", (url) ->
        # Open the page, grab the title, and send a response with it
        @ph.createPage((page) =>
            page.open(url, (status) =>
                page.evaluate((() -> document.title), (result) =>
                    @queueItemResponse(result)
                )
            )
        )

    if cluster.isMaster
        test.equal(engine._messageIdCounter, 0)
        test.equal(engine.queue, [])
        test.equal(engine.clientsQueue, [])

        expectedMessageId = 0
        item = null

        for url, expectedTitle of WEBSITES
            ((url, expectedTitle) ->
                item = engine.enqueue(url)

                item.on "timeout", () ->
                    throw new Error("Item timed out")

                item.on "response", () ->
                    test.equal(expectedTitle, item.response)
            )(url, expectedTitle)

            test.equal(engine._messageIdCounter, expectedMessageId++)

        item.on "response", () ->
            setTimeout(() ->
                test.done()
            , 1000)

    engine.start()